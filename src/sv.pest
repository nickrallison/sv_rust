WHITESPACE = _{ " " | NEWLINE | "\t" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }
cname = @{ (ASCII_ALPHANUMERIC | "_")+ }

module_kw = _{ "module" }
endmodule = _{ "endmodule" }
input = _{ "input" }
output = _{ "output" }

reg = _{ "reg" }
wire = _{ "wire" }
logic = _{ "logic" }
parameter = _{ "parameter" }
localparam = _{ "localparam" }
genvar = _{ "genvar" }
integer_kw = _{ "integer" }

always = _{ "always" }
always_comb = _{ "always_comb" }
always_ff = _{ "always_ff" }
always_latch = _{ "always_latch" }
assign = _{ "assign" }

case = _{ "case" }
endcase = _{ "endcase" }

if_kw = _{ "if" }
else_kw = _{ "else" }

begin = _{ "begin" }
end = _{ "end" }

posedge = _{ "posedge" }
negedge = _{ "negedge" }

for_kw = _{ "for" }
while_kw = _{ "while" }

generate = _{ "generate" }
endgenerate = _{ "endgenerate" }

identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }

string = _{ "\"" ~ inner ~ "\"" }
inner = _{ char* }
char = _        {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

net = _     {integer? ~ apos ~ ("b" | "B" | "o" | "O" | "d" | "D" | "h" | "H") ~ (ASCII_DIGIT | "x" | "X" | "z" | "Z" | "_" )+}
number = _      {
             "-"?
             ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
             ~ ("." ~ ASCII_DIGIT*)?
             ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
         }
bus = _     {"[" ~ integer ~ ":" ~ integer ~ "]"}
bus_select = _      {"[" ~ integer ~ "]"}

left_paren = _      { "(" }
right_paren = _     { ")" }
left_bracket = _        { "[" }
right_bracket = _       { "]" }
left_brace = _      { "{" }
right_brace = _     { "}" }
colon = _       { ":" }
semicolon = _       { ";" }
comma = _       { "," }
apos = _        { "'" }
integer = _     { ASCII_DIGIT+ }


// ############################

value_p1 =         { net | number }
value =         { value_p1 | identifier | ("(" ~ expression ~ ")") }


bus_expression = {value ~ (("[" ~ value ~ ":" ~ value ~ "]") | ("[" ~ value ~ "]"))}

lognegation_expression = {"!" ~ (value | lognegation_expression)}
bitnegation_expression = {"~" ~ (value | lognegation_expression | bitnegation_expression)}
reduceand_expression = {"&" ~ (value | lognegation_expression | bitnegation_expression)}
reduceor_expression = {"|" ~ (value | lognegation_expression | bitnegation_expression | reduceand_expression)}
reducenand_expression = {"~&" ~ (value | lognegation_expression | bitnegation_expression | reduceand_expression | reduceor_expression)}
reducenor_expression = {"~|" ~ (value | lognegation_expression | bitnegation_expression | reduceand_expression | reduceor_expression | reducenand_expression)}
reducexor_expression = {"^" ~ (value | lognegation_expression | bitnegation_expression | reduceand_expression | reduceor_expression | reducenand_expression | reducenor_expression)}
reducexnor_expression = {("~^" | "^~") ~ (value | lognegation_expression | bitnegation_expression | reduceand_expression | reduceor_expression | reducenand_expression | reducenor_expression | reducexor_expression)}
unary_plus_expression = {"+" ~ (value | lognegation_expression | bitnegation_expression | reduceand_expression | reduceor_expression | reducenand_expression | reducenor_expression | reducexor_expression | reducexnor_expression)}
unary_minus_expression = {"-" ~ (value | lognegation_expression | bitnegation_expression | reduceand_expression | reduceor_expression | reducenand_expression | reducenor_expression | reducexor_expression | reducexnor_expression | unary_plus_expression)}
unary_expression = { (value | lognegation_expression | bitnegation_expression | reduceand_expression | reduceor_expression | reducenand_expression | reducenor_expression | reducexor_expression | reducexnor_expression | unary_plus_expression | unary_minus_expression) }

mult_expression = {value ~ ("*" ~ value)+}
divide_expression = {(value | mult_expression) ~ ("/" ~ (value | mult_expression))+}
modulus_expression = {(value | mult_expression | divide_expression) ~ ("%" ~ (value | mult_expression | divide_expression))+}
plus_expression = {(value | mult_expression | divide_expression | modulus_expression) ~ ("+" ~ (value | mult_expression | divide_expression | modulus_expression))+}
minus_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression) ~ ("-" ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression))+}
shift_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression) ~ (("<<" | ">>") ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression))+}
bitand_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression) ~ ("&" ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression))+}
bitxor_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression) ~ ("^" ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression))+}
bitxnor_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression) ~ ("~^" ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression))+}
bitor_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression | bitxnor_expression) ~ ("|" ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression | bitxnor_expression))+}
logicand_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression | bitxnor_expression | bitor_expression) ~ ("&&" ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression | bitxnor_expression | bitor_expression))+}
logicor_expression = {(value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression | bitxnor_expression | bitor_expression | logicand_expression) ~ ("||" ~ (value | mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression | bitxnor_expression | bitor_expression | logicand_expression))+}
binary_expression = { (mult_expression | divide_expression | modulus_expression | plus_expression | minus_expression | shift_expression | bitand_expression | bitxor_expression | bitxnor_expression | bitor_expression | logicand_expression | logicor_expression) }

combine_expression = {("{" ~ (value | unary_expression | binary_expression) ~ ("," ~ (value | unary_expression | binary_expression))* ~ "}") | ("{" ~ (value | unary_expression | binary_expression) ~ "}")}

expression = { binary_expression | unary_expression | combine_expression | bus_expression | value }

assignment = {assign ~ equality_statement}

equality_statement = {identifier ~ "=" ~ expression ~ ";"}
case_statement = {case ~ "(" ~ expression ~ ")" ~ ((expression | "default") ~ ":" ~ statement)*  ~ endcase}
statement = {equality_statement | case_statement}

begin_end_block = {begin ~ statement* ~ end}

input_ports = {input ~ ((reg | logic | wire)? ~ bus? ~ (identifier ~ ","?)+)+}
output_ports = {output ~ ((reg | logic | wire)? ~ bus? ~ (identifier ~ ","?)+)+}
module_def = {module_kw ~ identifier ~ "(" ~ (input_ports | output_ports)* ~ ")" ~ ";" ~ (statement | assignment)* ~ endmodule}

module_io = {"." ~ identifier ~ "(" ~ identifier ~ "),?"}
module_init = {module_kw ~ ("#(" ~ module_io+ ~ ")")? ~ identifier ~ "(" ~ module_io* ~ ")" ~ ";"}

file = { SOI ~ module_def* ~ EOI}

// value = {(unary_operator)
//  | ()}

test = {case ~ "(" ~ expression ~ ")" ~ ((expression | "default") ~ ":" ~ statement)}